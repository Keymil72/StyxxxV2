const { SlashCommandBuilder, PermissionFlagsBits } = require("discord.js");

const { channelLogId } = require('../../config.json');
const { adminRole } = require('../../Events/Assets/Role.json');
const Logger = require('../../Features/Logger.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('cls')
        .setDescription('Komenda do czyÅ›cienia okreÅ›lonej liczby wiadomoÅ›ci')
        .addIntegerOption(option =>
            option.setName("message_amount")
                .setDescription('Liczba wiadomoÅ›ci do usuniÄ™cia')
                .setRequired(true)
        )
        .addStringOption(option =>
            option.setName("overload")
                .setDescription('PrzeciÄ…Å¼enie komendy')
        )
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    async execute(interaction) {
        // deklaracja zmiennych
        const client = interaction.client;
        let member = interaction.member;
        const ch = interaction.channel;
        // pobranie wartoÅ›ci z opcji
        const overload = await interaction.options.getString('overload') == null ? '' : interaction.options.getString('overload');
        const messageAmount = interaction.options.getInteger('message_amount');
        // jeÅ›li kanaÅ‚ jest wÄ…tkiem, to zmieÅ„ wyÅ›wietlany kanaÅ‚ na nazwÄ™ wÄ…tku
        let chString = ch.isThread() ? `WÄ…tek: ${ch.name}` : ch.toString();
        // zmienna z danymi komendy
        var commandData = "``` " + interaction.commandName + " " + messageAmount + " " + overload + " ```";

        // sprawdzenie czy uÅ¼ytkownik ma uprawnienia do wykonania komendy i wysÅ‚anie logÃ³w
        if (!member.roles.cache.some(role => role.name === adminRole)) {
            await interaction.reply({ content: 'Nie masz uprawnieÅ„ do wykonania tej komendy', ephemeral: true });
            Logger.log(interaction.client, `UÅ¼ytkownik ${member.user.username} prÃ³bowaÅ‚ wykonaÄ‡ komendÄ™ ${interaction.commandName} na kanale ${chString} - brak uprawnieÅ„`, 'error');
            return;
        }

        // sprawdzenie czy kanaÅ‚ jest kanaÅ‚em logÃ³w lub czy uÅ¼ytkownik podaÅ‚ przeciÄ…Å¼enie "-y"
        if (ch.id != channelLogId || overload.includes('-y')) {
            if (ch.isTextBased()) {
                let messagesDeleted = 0;
                if (messageAmount != null && messageAmount >= 1) {
                    await ch.messages.fetch({ limit: messageAmount }).then(messages => {
                        messages.forEach(message => {
                            if (message.deletable) {
                                let attachmentUrl = message.attachments.first() ? message.attachments.first().url : null;
                                Logger.log(interaction.client, `UsuniÄ™to wiadomoÅ›Ä‡ "${message.content}" z zaÅ‚Ä…cznikiem "${attachmentUrl}" na kanale ${chString} przez uÅ¼ytkownika ${member.user.username}`, 'msgContent');
                                message.delete()
                                messagesDeleted++;
                            }
                        });
                    });
                } else if (messageAmount == 0) {
                    await ch.messages.fetch().then(messages => {
                        messages.forEach(message => {
                            if (message.deletable) {
                                let attachmentUrl = message.attachments.first() ? message.attachments.first().url : null;
                                Logger.log(interaction.client, `UsuniÄ™to wiadomoÅ›Ä‡ "${message.content}" z zaÅ‚Ä…cznikiem "${attachmentUrl}" na kanale ${chString} przez uÅ¼ytkownika ${member.user.username}`, 'msgContent');
                                message.delete()
                                messagesDeleted++;
                            }
                        });
                    });
                }
                if (overload.includes("-h"))
                    Logger.log(interaction.client, `UÅ¼ytkownik ${member.toString()} wykonaÅ‚ komendÄ™ ${commandData} na kanale ${chString}`, 'hiddencritical');
                else
                    Logger.log(interaction.client, `UÅ¼ytkownik ${member.toString()} wykonaÅ‚ komendÄ™ ${commandData} na kanale ${chString}`, 'critical');
                
                Logger.log(client, `UsuniÄ™to ${messagesDeleted} wiadomoÅ›ci z kanaÅ‚u ${ch.toString()} przez ${member.toString()}`, 'info');
            } else {
                await interaction.reply({ content: 'Nie podano liczby wiadomoÅ›ci do usuniÄ™cia', ephemeral: true });
                Logger.log(interaction.client, `UÅ¼ytkownik ${member.user.username} prÃ³bowaÅ‚ wykonaÄ‡ komendÄ™ ${interaction.commandName} na kanale ${chString} - brak liczby wiadomoÅ›ci`, 'error');
                return;
            }
        } else {
            await interaction.reply({ content: 'Nie moÅ¼na usunÄ…Ä‡ wiadomoÅ›ci na tym kanale', ephemeral: true });
            Logger.log(interaction.client, `UÅ¼ytkownik ${member.user.username} prÃ³bowaÅ‚ wykonaÄ‡ komendÄ™ ${interaction.commandName} na kanale ${chString} - nie moÅ¼na usunÄ…Ä‡ wiadomoÅ›ci z tego kanaÅ‚u`, 'error');
            return;
        }
        await interaction.reply({ content: 'Ja tu tylko sprzÄ…tam... ğŸ§¹', ephemeral: true });

        var commandData = "``` " + interaction.commandName + " " + messageAmount + " ```";
    },
};